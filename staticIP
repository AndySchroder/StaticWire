#!/usr/bin/env python3


###############################################################################
###############################################################################
# Copyright (c) 2023, Andy Schroder
# See the file README.md for licensing information.
###############################################################################
###############################################################################


print('')
print('')
print('')
print('')


################################################################
# import modules
################################################################





from pathlib import Path
from os import makedirs,getcwd
from os.path import isfile,isdir
from argparse import ArgumentParser
from ruamel.yaml import YAML
from time import time,sleep
from bolt11.core import decode
import requests
from requests_toolbelt.adapters.fingerprint import FingerprintAdapter
from qrcode_term import qrcode_string
from wireguard_tools import WireguardConfig,WireguardKey
from helpers2 import TimeStampedPrint,SetPrintWarningMessages;SetPrintWarningMessages(True)

# use ruamel.yaml to try and get more desireable indentation of the output
# ruamel.yaml claims it is so much better than PyYAML, but it is not really that much better.
# the documentation of both is very bad. there do seem to be some indentation options in PyYAML,
# but they are hard to find in the documentation and this works, so just leaving it for now.
yaml=YAML(typ='safe',pure=True)
yaml.default_flow_style = False
yaml.indent(mapping=8, sequence=2, offset=0)





################################################################
# assign defaults
################################################################

DefaultHostName='https://38.45.103.1'
DefaultTrustedFingerprint='873c306a1f6a6b8f3ae439a5fbd55025edd7bb8724390f4a21bfe5c35f568b2d'

ConfigFileName='Config.yaml'



################################################################
# read ConfigFile from home folder and apply defaults for missing values
################################################################


ChangesToConfigFile=0

TheDataFolder=str(Path.home())+'/.StaticWire/'

if not isdir(TheDataFolder):
	makedirs(TheDataFolder)
	TimeStampedPrint(TheDataFolder+' does not exist, so creating it!')

if isfile(TheDataFolder+ConfigFileName):
	with open(TheDataFolder+ConfigFileName, 'r') as file:
		ConfigFile=yaml.load(file)

	if ConfigFile is None:
		ConfigFile={}
		TimeStampedPrint(TheDataFolder+ConfigFileName+' is empty!')
else:
	ConfigFile={}
	TimeStampedPrint(TheDataFolder+ConfigFileName+' does not exist, so creating it!')



if ConfigFile.get('Server') is None or ConfigFile['Server'].get('HostName') is None:
	if (ConfigFile.get('Server') is not None) and (ConfigFile['Server'].get('TrustedFingerprint') is not None):
		raise Exception('HostName not defined but TrustedFingerprint defined defined in '+TheDataFolder+ConfigFileName)
	else:
		ConfigFile['Server'] =	{
						'HostName' :		DefaultHostName,
						'TrustedFingerprint' :	DefaultTrustedFingerprint,
					}

		ChangesToConfigFile+=1
		TimeStampedPrint('HostName and TrustedFingerprint not defined, assigning default values of '+DefaultHostName+' and '+DefaultTrustedFingerprint)

elif ConfigFile['Server'].get('TrustedFingerprint') is None:
	raise Exception('HostName defined but TrustedFingerprint not defined in '+TheDataFolder+ConfigFileName)


if ConfigFile.get('private_key') is None:

	#from secrets import base64,token_bytes
	#ConfigFile['public_key']=base64.b64encode(token_bytes()).decode()

	# generate a new private key and save it.

	private_key = WireguardKey.generate()
	ConfigFile['private_key'] = str(private_key)
	ConfigFile['public_key'] = str(private_key.public_key())

	ChangesToConfigFile+=1
	TimeStampedPrint('no private_key found in '+TheDataFolder+ConfigFileName+', so created one and overwrote any public_key that may have existed with a new one!')


if ChangesToConfigFile>0:
	TimeStampedPrint('writing to '+TheDataFolder+ConfigFileName)
	with open(TheDataFolder+ConfigFileName, 'w') as file:
		yaml.dump(ConfigFile, file)
	TimeStampedPrint('finished writing to '+TheDataFolder+ConfigFileName)
else:
	TimeStampedPrint('no changes to '+TheDataFolder+ConfigFileName)



# setup a secure session that trusts only a certain fingerprint (see https://toolbelt.readthedocs.io/en/latest/adapters.html#fingerprintadapter)
# we don't want to deal with certificate authorities, they are a nuisance and they can't be trusted anyway.
# requiring a trusted fingerprint allows verify=False to be used on each request. note, https://medium.com/@jbirdvegas/python-certificate-pinning-c44e9a34ed1c suggests that
# requests_toolbelt ignores the fingerprint verification of standard validation is turned off, but tested it and this seems to not be true.
SecureSession = requests.Session()
SecureSession.mount(ConfigFile['Server']['HostName'],FingerprintAdapter(ConfigFile['Server']['TrustedFingerprint']))















def ProcessInvoice(response):
	if 'Error' not in response.json():

#		TimeStampedPrint(response.json(),prettyprintprepend='config',prettyprint=True)
		DecodedInvoice = decode(response.json()['Invoice'])

		print()
		TimeStampedPrint(response.json(),prettyprintprepend='Terms',prettyprint=True)
		print()
		print('lightning invoice: ')
		print('amount:  '+str(DecodedInvoice.amount/1000)+' sats')
		print('expires: '+str(DecodedInvoice.expiry_time)+' seconds')
		print(qrcode_string(response.json()['Invoice']))
		print()

		TimeStampedPrint('waiting for invoice to be paid')
		while time()<(DecodedInvoice.timestamp+DecodedInvoice.expiry_time):
			Status=RentalStatus()
			if 'unpaid_invoice' in Status:
				if Status['unpaid_invoice'] == None:
					TimeStampedPrint('invoice paid')
					GetRentalStatus()			# makes an extra http call, but that's fine for now
					if response.json()['InitialInvoice'] == True:
						GetConf()
					break
			else:
				TimeStampedPrint('unexpected response, trying again')
			sleep(1.25)
		else:
			TimeStampedPrint('invoice not paid before expiration.... need to request a new rental')
	else:
		TimeStampedPrint(response.json(),prettyprintprepend='config',prettyprint=True)




def RentNewIP():
	response = SecureSession.post(ConfigFile['Server']['HostName']+'/api/rent/', data={'WireGuardPubKey': ConfigFile['public_key']},verify=False)
	ProcessInvoice(response)

def RenewIP():
	response = SecureSession.post(ConfigFile['Server']['HostName']+'/api/renew/', data={'WireGuardPubKey': ConfigFile['public_key']},verify=False)
	ProcessInvoice(response)

def RentalStatus():
	response = SecureSession.post(ConfigFile['Server']['HostName']+'/api/getstatus/', data={'WireGuardPubKey': ConfigFile['public_key']},verify=False)
	return response.json()

def GetRentalStatus():
	print()
	TimeStampedPrint(RentalStatus(),prettyprintprepend='IPRentStatus',prettyprint=True)
	print()

def GetConf():
	response = SecureSession.post(ConfigFile['Server']['HostName']+'/api/getconf/', data={'WireGuardPubKey': ConfigFile['public_key']},verify=False)
	print()
	TimeStampedPrint(response.json(),prettyprintprepend='tunnel config info',prettyprint=True)

	if 'Error' not in response.json():
		print()
		GenerateConfig(response.json())
		print()

def GenerateConfig(dict_config):

	dict_config['private_key']=ConfigFile['private_key']

	config = WireguardConfig.from_dict(dict_config)

	print('-----BEGIN WIREGUARD CONF FILE-----')
	print()
	print(config.to_wgconfig(wgquick_format=True))
	print('-----END WIREGUARD CONF FILE-----')

	print()
	print()

	print('wireguard conf file in a QR code (scan with something like https://f-droid.org/en/packages/com.wireguard.android/)')
	print()
	print(qrcode_string(config.to_wgconfig(wgquick_format=True)))

	print()
	print()



	# now write to a file #

	WireGuardConfigFileName=dict_config['addresses'][0].replace('/', '-')+'.conf'			#only use the first address for the filename, then replace the / with a -, then add the extension.

	UserInput = input(
				'Where to create '+WireGuardConfigFileName+'?\n'+
				'\n'+
				'                [0] Don\'t create '+WireGuardConfigFileName+' anywhere.\n'+
				'                [1] Save to /etc/wireguard/'+WireGuardConfigFileName+' .\n'+
				'                [2] Save to '+getcwd()+'/'+WireGuardConfigFileName+' .\n'+
				'\n'+
				'                 '
			)
	print()
	print()


	if UserInput == '1':
		WireGuardConfigFilePath = '/etc/wireguard/'
	elif UserInput =='2':
		WireGuardConfigFilePath = getcwd()+'/'
	else:
		WireGuardConfigFilePath = None

	if WireGuardConfigFilePath is not None:
		TimeStampedPrint('starting write to '+WireGuardConfigFilePath+WireGuardConfigFileName)
		with open(WireGuardConfigFilePath+WireGuardConfigFileName, "w") as WireGuardConfigFileHandle:
			WireGuardConfigFileHandle.write(config.to_wgconfig(wgquick_format=True))
		TimeStampedPrint('finished write to '+WireGuardConfigFilePath+WireGuardConfigFileName)

		print()
		print()
		print(
				'Use \n'+
				'\n'+
				'         wg-quick up '+WireGuardConfigFilePath+WireGuardConfigFileName+'\n'+
				'\n'+
				'                ~OR~\n'+
				'\n'+
				'         nmcli connection import type wireguard file '+WireGuardConfigFilePath+WireGuardConfigFileName+'\n'+
				'\n'+
				'to setup the tunnel on the computer/container/VM that you want to use it with.\n'+
				''
			)
		print()
		print()

	else:
		TimeStampedPrint('not creating '+WireGuardConfigFileName)


















parser = ArgumentParser(description="StaticWire: Rent wireguard tunnels with public IP addresses using bitcoin lightning payments")
parser.add_argument("Action", help="indicate the action to take.",choices=['RentNewIP', 'GetRentalStatus','GetConf','Renew'])
parser.add_argument("-a","--autopay", help="use stored LND credentials to automatically pay invoices", action="store_true")
arguments=parser.parse_args()


if arguments.autopay:
	# not implemented yet
	pass


Action=arguments.Action

print()
print()
TimeStampedPrint('local wireguard public_key: '+ConfigFile['public_key'])

if   Action == 'RentNewIP':
	RentNewIP()
elif Action == 'GetRentalStatus':
	GetRentalStatus()
elif Action == 'GetConf':
	GetConf()
elif Action == 'Renew':
	RenewIP()
else:	#should never get here because "choices" defined above should error out first.
	raise Exception('invalid action')



print()
print()













