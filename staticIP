#!/usr/bin/env python3


###############################################################################
###############################################################################
# Copyright (c) 2023, Andy Schroder
# See the file README.md for licensing information.
###############################################################################
###############################################################################



################################################################
# import modules
################################################################

from math import ceil
from pathlib import Path
from os import makedirs,getcwd
from os.path import isfile,isdir
from argparse import ArgumentParser
from ruamel.yaml import YAML
from time import time,sleep
from bolt11.core import decode
import requests
from requests_toolbelt.adapters.fingerprint import FingerprintAdapter
from qrcode_term import qrcode_string
from wireguard_tools import WireguardConfig,WireguardKey
from datetime import datetime,timedelta
from helpers2 import RoundAndPadToString,TimeStampedPrint,SetPrintWarningMessages,FullDateTimeString;SetPrintWarningMessages(True)

# use ruamel.yaml to try and get more desireable indentation of the output
# ruamel.yaml claims it is so much better than PyYAML, but it is not really that much better.
# the documentation of both is very bad. there do seem to be some indentation options in PyYAML,
# but they are hard to find in the documentation and this works, so just leaving it for now.
yaml=YAML(typ='safe',pure=True)
yaml.default_flow_style = False
yaml.indent(mapping=8, sequence=2, offset=0)









################################################################
# parse the command line
################################################################

parser = ArgumentParser(description="StaticWire: Rent wireguard tunnels with dedicated public static IP addresses using bitcoin lightning payments")
parser.add_argument("Action",choices=['AddCredit','GetRentalStatus','GetConf','AutoPay'], help="Action to take: `AddCredit` provides a lightning invoice to add credit to an existing tunnel rental. If there is no existing tunnel rental then a lightning invoice is provided for a new tunnel and then the new tunnel rental is started and a wireguard configuration is provided after payment is made. `GetRentalStatus` will give the current status of the tunnel so that you can check when you need to use `AddCredit` to make payments. `GetConf` gets the tunnel's wireguard configuration if you lost it after initially running `AddCredit`. `AutoPay` runs continuously and uses stored LND credentials to automatically pay invoices (not yet implemented).")
parser.add_argument('--amount', default=24000,type=int,help="amount of credit to add (default: %(default)s) [sat].")
arguments=parser.parse_args()




################################################################
# give some extra space in the output terminal
################################################################

print('')
print('')
print('')
print('')



################################################################
# assign defaults
################################################################

DefaultHostName='https://38.45.103.1'
DefaultTrustedFingerprint='873c306a1f6a6b8f3ae439a5fbd55025edd7bb8724390f4a21bfe5c35f568b2d'

ConfigFileName='Config.yaml'



################################################################
# read ConfigFile from home folder and apply defaults for missing values
################################################################


ChangesToConfigFile=0

TheDataFolder=str(Path.home())+'/.StaticWire/'

if not isdir(TheDataFolder):
	makedirs(TheDataFolder)
	TimeStampedPrint(TheDataFolder+' does not exist, so creating it!')

if isfile(TheDataFolder+ConfigFileName):
	with open(TheDataFolder+ConfigFileName, 'r') as file:
		ConfigFile=yaml.load(file)

	if ConfigFile is None:
		ConfigFile={}
		TimeStampedPrint(TheDataFolder+ConfigFileName+' is empty!')
else:
	ConfigFile={}
	TimeStampedPrint(TheDataFolder+ConfigFileName+' does not exist, so creating it!')



if ConfigFile.get('Server') is None or ConfigFile['Server'].get('HostName') is None:
	if (ConfigFile.get('Server') is not None) and (ConfigFile['Server'].get('TrustedFingerprint') is not None):
		raise Exception('HostName not defined but TrustedFingerprint defined defined in '+TheDataFolder+ConfigFileName)
	else:
		ConfigFile['Server'] =	{
						'HostName' :		DefaultHostName,
						'TrustedFingerprint' :	DefaultTrustedFingerprint,
					}

		ChangesToConfigFile+=1
		TimeStampedPrint('HostName and TrustedFingerprint not defined, assigning default values of '+DefaultHostName+' and '+DefaultTrustedFingerprint)

elif ConfigFile['Server'].get('TrustedFingerprint') is None:
	raise Exception('HostName defined but TrustedFingerprint not defined in '+TheDataFolder+ConfigFileName)


if ConfigFile.get('private_key') is None:

	#from secrets import base64,token_bytes
	#ConfigFile['public_key']=base64.b64encode(token_bytes()).decode()

	# generate a new private key and save it.

	private_key = WireguardKey.generate()
	ConfigFile['private_key'] = str(private_key)
	ConfigFile['public_key'] = str(private_key.public_key())

	ChangesToConfigFile+=1
	TimeStampedPrint('no private_key found in '+TheDataFolder+ConfigFileName+', so created one and overwrote any public_key that may have existed with a new one!')

TimeStampedPrint('local wireguard public_key: '+ConfigFile['public_key'])

if ChangesToConfigFile>0:
	TimeStampedPrint('writing to '+TheDataFolder+ConfigFileName)
	with open(TheDataFolder+ConfigFileName, 'w') as file:
		yaml.dump(ConfigFile, file)
	TimeStampedPrint('finished writing to '+TheDataFolder+ConfigFileName)
else:
	TimeStampedPrint('no changes to '+TheDataFolder+ConfigFileName)





################################################################
# configure https request object
################################################################

# setup a secure session that trusts only a certain fingerprint (see https://toolbelt.readthedocs.io/en/latest/adapters.html#fingerprintadapter)
# we don't want to deal with certificate authorities, they are a nuisance and they can't be trusted anyway.
# requiring a trusted fingerprint allows verify=False to be used on each request. note, https://medium.com/@jbirdvegas/python-certificate-pinning-c44e9a34ed1c suggests that
# requests_toolbelt ignores the fingerprint verification of standard validation is turned off, but tested it and this seems to not be true.
SecureSession = requests.Session()
SecureSession.mount(ConfigFile['Server']['HostName'],FingerprintAdapter(ConfigFile['Server']['TrustedFingerprint']))		#ConfigFile['Server']['HostName'] is needed here (in addition to in the .post() function) to provide a scope for the FingerprintAdapter.










################################################################
# define functions
################################################################


def AddCredit(amount):

	response = SecureSession.post(ConfigFile['Server']['HostName']+'/api/AddCredit/', data={'WireGuardPubKey': ConfigFile['public_key'], 'amount': amount},verify=False)

	if response.status_code != 200:

		print(response.status_code)
		print(response.content)

		raise Exception('rental server API query gave a bad status_code.')

	if 'Error' not in response.json():

		AddedTime=response.json()['AddedCredit']/response.json()['CurrentRate']

		if response.json()['InitialInvoice'] != True:

			Status=RentalStatus()

			NewRemainingTime=Status['TimeRemaining']+AddedTime

			PrintRentalStatus(Status)

			print()
			print('---------------------------------------------------------------------------------------------------')
			print()
			TimeStampedPrint('adding credit for static IP address '+Status['Address'])
			print()

		else:
			print()
			print('---------------------------------------------------------------------------------------------------')
			print()
			TimeStampedPrint('no existing rental found associated with the wireguard public key '+ConfigFile['public_key']+'. renting a new tunnel and static IP address with an initial credit amount of '+str(amount)+' [sat]')
			print()

			NewRemainingTime=AddedTime




		DecodedInvoice = decode(response.json()['Invoice'])

		print()
		TimeStampedPrint(response.json(),prettyprintprepend='Terms',prettyprint=True)
		print()
		print('+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')
		print()

		print('new rental rate :                  '+RoundAndPadToString(1/response.json()['CurrentRate'],0)+' [seconds/sat] , '+RoundAndPadToString(response.json()['CurrentRate']*(3600*24),0)+' [sat/day], '+RoundAndPadToString(response.json()['CurrentRate']*(3600*24*(365.25/12)),0)+' [sat/month]')

		print('invoice expires :                  '+FullDateTimeString(DecodedInvoice.timestamp+DecodedInvoice.expiry_time)+' (in '+str(timedelta(seconds=ceil(DecodedInvoice.timestamp+DecodedInvoice.expiry_time-time())))+')')
		print('total invoice amount :             '+RoundAndPadToString(DecodedInvoice.amount/1000,0)+' [sat]')

		if response.json()['InitialInvoice'] == True:
			print('one time address activation fee:   '+RoundAndPadToString(response.json()['ActivationFee'],0)+' [sat]')

			if response.json()['ActivationFee']+response.json()['AddedCredit'] != DecodedInvoice.amount/1000:
				raise Exception('itemized amounts from server do not add up to the total invoice amount.')


		print('rental credit to be added :        '+RoundAndPadToString(response.json()['AddedCredit'],0)+' [sat] ('+str(timedelta(seconds=ceil(AddedTime)))+')')

		print('new credit provides service until: '+FullDateTimeString(time()+NewRemainingTime)+' ('+str(timedelta(seconds=ceil(NewRemainingTime)))+')')


		print()
		print('---------------------------------------------------------------------------------------------------')
		print()
		print('lightning invoice: ')
		print()
		print(qrcode_string(response.json()['Invoice']))
		print()

		TimeStampedPrint('waiting for invoice to be paid')
		while time()<(DecodedInvoice.timestamp+DecodedInvoice.expiry_time):
			Status=RentalStatus()
			if 'unpaid_invoice' in Status:
				if Status['unpaid_invoice'] == None:
					TimeStampedPrint('invoice paid')
					print()
					print('---------------------------------------------------------------------------------------------------')
					print()
					PrintRentalStatus(Status)
					if response.json()['InitialInvoice'] == True:
						GetConf()
					break
			else:
				TimeStampedPrint('unexpected response, trying again')
			sleep(1.25)
		else:
			TimeStampedPrint('invoice not paid before expiration.... need to request a new rental')
	else:
		TimeStampedPrint(response.json(),prettyprintprepend='config',prettyprint=True)





def RentalStatus():
	response = SecureSession.post(ConfigFile['Server']['HostName']+'/api/getstatus/', data={'WireGuardPubKey': ConfigFile['public_key']},verify=False)

	if response.status_code != 200:

		print(response.status_code)
		print(response.content)

		raise Exception('rental server API query gave a bad status_code.')

	return response.json()

def PrintRentalStatus(Status):

	print()
	TimeStampedPrint(Status,prettyprintprepend='IP Rental Status',prettyprint=True)
	print()

	if 'Error' not in Status:

		print()
		print('+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')
		print()

		print('rental rate :                      '+RoundAndPadToString(1/Status['CurrentRate'],0)+' [seconds/sat] , '+RoundAndPadToString(Status['CurrentRate']*(3600*24),0)+' [sat/day], '+RoundAndPadToString(Status['CurrentRate']*(3600*24*(365.25/12)),0)+' [sat/month]')
		print('start time :                       '+FullDateTimeString(Status['start_time'])+' ('+str(timedelta(seconds=ceil(time()-Status['start_time'])))+' ago)')
		print('paid until :                       '+FullDateTimeString(time()+Status['TimeRemaining'])+' ('+str(timedelta(seconds=ceil(Status['TimeRemaining'])))+')')		# trusing the server for this and not doing the calculation locally (although have all the data to do it), should verify this.......
		print('total paid :                       '+RoundAndPadToString(Status['total_paid'],0)+' [sat]')
		print('credit :                           '+RoundAndPadToString(Status['Credit'],0)+' [sat]')








def GetConf():
	response = SecureSession.post(ConfigFile['Server']['HostName']+'/api/getconf/', data={'WireGuardPubKey': ConfigFile['public_key']},verify=False)

	if response.status_code != 200:

		print(response.status_code)
		print(response.content)

		raise Exception('rental server API query gave a bad status_code.')

	print()
	print('---------------------------------------------------------------------------------------------------')
	print()
	TimeStampedPrint(response.json(),prettyprintprepend='tunnel config info',prettyprint=True)

	if 'Error' not in response.json():

		print()
		print('+++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++++')
		print()
		GenerateConfig(response.json())
		print()

def GenerateConfig(dict_config):

	dict_config['private_key']=ConfigFile['private_key']

	config = WireguardConfig.from_dict(dict_config)

	print('-----BEGIN WIREGUARD CONF FILE-----')
	print()
	print(config.to_wgconfig(wgquick_format=True))
	print('-----END WIREGUARD CONF FILE-----')

	print()
	print()

	print('wireguard conf file in a QR code (scan with something like https://f-droid.org/en/packages/com.wireguard.android/)')
	print()
	print(qrcode_string(config.to_wgconfig(wgquick_format=True)))

	print()
	print()



	# now write to a file #

	WireGuardConfigFileName=dict_config['addresses'][0].replace('/', '-')+'.conf'			#only use the first address for the filename, then replace the / with a -, then add the extension.

	UserInput = input(
				'Where to create '+WireGuardConfigFileName+'?\n'+
				'\n'+
				'                [0] Don\'t create '+WireGuardConfigFileName+' anywhere.\n'+
				'                [1] Save to /etc/wireguard/'+WireGuardConfigFileName+' .\n'+
				'                [2] Save to '+getcwd()+'/'+WireGuardConfigFileName+' .\n'+
				'\n'+
				'                 '
			)
	print()
	print()


	if UserInput == '1':
		WireGuardConfigFilePath = '/etc/wireguard/'
	elif UserInput =='2':
		WireGuardConfigFilePath = getcwd()+'/'
	else:
		WireGuardConfigFilePath = None

	if WireGuardConfigFilePath is not None:
		TimeStampedPrint('starting write to '+WireGuardConfigFilePath+WireGuardConfigFileName)
		with open(WireGuardConfigFilePath+WireGuardConfigFileName, "w") as WireGuardConfigFileHandle:
			WireGuardConfigFileHandle.write(config.to_wgconfig(wgquick_format=True))
		TimeStampedPrint('finished write to '+WireGuardConfigFilePath+WireGuardConfigFileName)

		print()
		print()
		print(
				'Use \n'+
				'\n'+
				'         wg-quick up '+WireGuardConfigFilePath+WireGuardConfigFileName+'\n'+
				'\n'+
				'                ~OR~\n'+
				'\n'+
				'         nmcli connection import type wireguard file '+WireGuardConfigFilePath+WireGuardConfigFileName+'\n'+
				'\n'+
				'to setup the tunnel on the computer/container/VM that you want to use it with.\n'+
				''
			)
		print()
		print()

	else:
		TimeStampedPrint('not creating '+WireGuardConfigFileName)


















################################################################
# act based on the command line arguments
################################################################

if   arguments.Action == 'AddCredit':
	AddCredit(amount=arguments.amount)
elif arguments.Action == 'GetRentalStatus':
	PrintRentalStatus(RentalStatus())
elif arguments.Action == 'GetConf':
	GetConf()
elif arguments.Action == 'AutoPay':
	print('AutoPay not yet implemented')
else:	#should never get here because "choices" defined above should error out first.
	raise Exception('invalid action')

print()
print()













